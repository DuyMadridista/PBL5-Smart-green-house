interface VueEmailPluginOptions {
    /**
     * The base URL of your website.
     * @default null
     * @example
     * ```ts
     * baseUrl: 'https://example.com'
     * ```
     * @see https://vue-email.net/getting-started/installation#options
     */
    baseUrl?: string | null;
    /**
     * Provide translations for your templates.
     * @see
     */
    i18n?: i18n;
    [key: string]: any;
}
interface i18n {
    /**
     * The default locale if none is provided.
     * It is also used as fallback if translation does not exist in requested locale.
     */
    defaultLocale: string;
    /**
     * @see https://vue-i18n.intlify.dev/
     * @example
     * ```ts
     * translations: {
     *   en: {
     *     hello: "Hello"
     *   },
     *   sv: {
     *     hello: "Hej"
     *   }
     * }
     * ```
     */
    translations?: Record<string, Record<string, string>>;
}
interface DefineConfigFunctions {
    render: (name: string, options?: RenderOptions) => Promise<string>;
}
type DefineConfig = (dir: string, config?: Options) => DefineConfigFunctions;
interface Options {
    /**
     * Show library logger
     * @default true
     */
    verbose?: boolean;
    /**
     * VueEmailPlugin options
     * @default {}
     * @see
     * https://vuemail.net/getting-started/installation#options
     */
    options?: VueEmailPluginOptions;
}
interface SourceOptions {
    /**
     * The source code of the component.
     */
    source: string;
    /**
     * The components used in the component.
     */
    components: {
        name: string;
        source: string;
    }[];
}
interface RenderOptions {
    props?: Record<string, unknown>;
    i18n?: i18n;
}
type DeepRequired<T> = Required<{
    [P in keyof T]: DeepRequired<T[P]>;
}>;

export type { DefineConfigFunctions as D, Options as O, RenderOptions as R, SourceOptions as S, VueEmailPluginOptions as V, DefineConfig as a, DeepRequired as b, i18n as i };
